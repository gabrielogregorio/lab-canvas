{"mappings":"CCAC,AAAA,WACC,SAAS,EAAe,CAAa,EACnC,OAAO,KAAM,EAAE,CAAG,IAAO,CAC3B,CAGA,IAAM,EAAU,AADD,SAAS,cAAc,CAAC,UAChB,UAAU,CAAC,MAI5B,EAAqB,SAAC,CAAmB,EAC7C,EAAQ,SAAS,GACjB,EAAQ,SAAS,CAAG,OAAA,MAAA,CAAO,AAAgB,IAAhB,KAAK,MAAM,GAAQ,MAAA,MAAA,CAAK,AAAgB,IAAhB,KAAK,MAAM,GAAQ,MAAA,MAAA,CAAK,AAAgB,IAAhB,KAAK,MAAM,GAAQ,KAI9F,IAAM,EAAa,EAAe,GAC5B,EAAW,EAAe,KAGhC,EAAQ,GAAG,CAPO,KAAK,MAAM,GAAK,EAChB,KAAK,MAAM,GAAK,EACnB,AAAgB,IAAhB,KAAK,MAAM,GAKgB,EAAY,EAF7B,CAAA,GAGzB,EAAQ,IAAI,GACZ,EAAQ,SAAS,EACnB,EAEM,EAAsB,SAAC,CAAuB,EAClD,IAAM,EAAa,EAAe,KAI5B,EAAW,EAAe,GAEhC,EAAQ,SAAS,GACjB,EAAQ,SAAS,CAAG,OACpB,EAAQ,GAAG,CAAC,IAAK,IALJ,GAKiB,EAAY,EAPjB,CAAA,GAQzB,EAAQ,IAAI,GACZ,EAAQ,SAAS,GAEjB,EAAQ,SAAS,GACjB,EAAQ,SAAS,CAAG,OACpB,EAAQ,GAAG,CAAC,IAAK,IAXJ,GAWiB,EAAY,EAAU,CAAA,GACpD,EAAQ,IAAI,GACZ,EAAQ,SAAS,EACnB,EAII,EAAkB,GAmBtB,AAlBA,SAAS,IACP,WAAW,WACT,EAAQ,SAAS,CAAC,EAAG,EAAG,IAAK,KAE7B,IAAK,IAAI,EAAQ,EAAG,EAPA,GAOyB,GAAS,EACpD,EA7Cc,KAgDhB,EAAoB,GACpB,CAAA,GAAmB,CAAA,EACG,KACpB,CAAA,EAAkB,CAAA,EAGpB,sBAAsB,EACxB,EAAG,IACL,GAGF,G,6D","sources":["<anon>","src/base/circle.ts"],"sourcesContent":["var $b9c2d9e9562cfc18$exports = {};\n(function() {\n    function angleToRadians(angle) {\n        return Math.PI / 180 * angle;\n    }\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var widthCanvas = 500;\n    var renderRandomCircle = function(widthCanvas) {\n        context.beginPath();\n        context.fillStyle = \"rgb(\".concat(Math.random() * 255, \", \").concat(Math.random() * 255, \", \").concat(Math.random() * 255, \")\");\n        var positionX = Math.random() * widthCanvas;\n        var positionY = Math.random() * widthCanvas;\n        var radius = Math.random() * 100;\n        var startAngle = angleToRadians(0);\n        var endAngle = angleToRadians(360);\n        var counterclockwise = true;\n        context.arc(positionX, positionY, radius, startAngle, endAngle, counterclockwise);\n        context.fill();\n        context.closePath();\n    };\n    var renderAnimateCircle = function(endAngleControl) {\n        var startAngle = angleToRadians(180);\n        var counterclockwise = false;\n        var radius = 50;\n        var endAngle = angleToRadians(endAngleControl);\n        context.beginPath();\n        context.fillStyle = \"#0aa\";\n        context.arc(200, 200, radius, startAngle, endAngle, counterclockwise);\n        context.fill();\n        context.closePath();\n        context.beginPath();\n        context.fillStyle = \"#faa\";\n        context.arc(200, 200, radius, startAngle, endAngle, !counterclockwise);\n        context.fill();\n        context.closePath();\n    };\n    var quantitySpheres = 50;\n    var endAngleControl = 0;\n    function draw() {\n        setTimeout(function() {\n            context.clearRect(0, 0, 500, 500);\n            for(var index = 0; index < quantitySpheres; index += 1)renderRandomCircle(widthCanvas);\n            renderAnimateCircle(endAngleControl);\n            endAngleControl += 1;\n            if (endAngleControl > 360) endAngleControl = 0;\n            requestAnimationFrame(draw);\n        }, 800);\n    }\n    draw();\n})();\n\n\n//# sourceMappingURL=circle.fbca4612.js.map\n","(function () {\n  function angleToRadians(angle: number) {\n    return (Math.PI / 180) * angle;\n  }\n\n  const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n  const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n  const widthCanvas = 500;\n\n  const renderRandomCircle = (widthCanvas: number) => {\n    context.beginPath();\n    context.fillStyle = `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255})`;\n    const positionX = Math.random() * widthCanvas;\n    const positionY = Math.random() * widthCanvas;\n    const radius = Math.random() * 100;\n    const startAngle = angleToRadians(0);\n    const endAngle = angleToRadians(360);\n    const counterclockwise = true;\n\n    context.arc(positionX, positionY, radius, startAngle, endAngle, counterclockwise);\n    context.fill();\n    context.closePath();\n  };\n\n  const renderAnimateCircle = (endAngleControl: number) => {\n    const startAngle = angleToRadians(180);\n    const counterclockwise = false;\n\n    let radius = 50;\n    const endAngle = angleToRadians(endAngleControl);\n\n    context.beginPath();\n    context.fillStyle = \"#0aa\";\n    context.arc(200, 200, radius, startAngle, endAngle, counterclockwise);\n    context.fill();\n    context.closePath();\n\n    context.beginPath();\n    context.fillStyle = \"#faa\";\n    context.arc(200, 200, radius, startAngle, endAngle, !counterclockwise);\n    context.fill();\n    context.closePath();\n  };\n\n  const quantitySpheres = 50;\n\n  let endAngleControl = 0;\n  function draw() {\n    setTimeout(() => {\n      context.clearRect(0, 0, 500, 500);\n\n      for (let index = 0; index < quantitySpheres; index += 1) {\n        renderRandomCircle(widthCanvas);\n      }\n\n      renderAnimateCircle(endAngleControl);\n      endAngleControl += 1;\n      if (endAngleControl > 360) {\n        endAngleControl = 0;\n      }\n\n      requestAnimationFrame(draw);\n    }, 800);\n  }\n\n  draw();\n})();\n"],"names":["angleToRadians","angle","Math","PI","context","canvas","document","getElementById","getContext","renderRandomCircle","widthCanvas","beginPath","fillStyle","concat","random","startAngle","endAngle","arc","fill","closePath","renderAnimateCircle","endAngleControl","draw","setTimeout","clearRect","index","requestAnimationFrame"],"version":3,"file":"circle.fbca4612.js.map"}